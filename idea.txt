Diffusion-limited aggregation (DLA) è un processo di formazione di cristalli nel quale le particelle si
muovono in uno spazio 2D con moto browniano (cioè in modo casuale) e si combinano tra loro
quando si toccano. DLA può essere simulato utilizzando una griglia 2D in cui ogni cella può essere
occupata da uno o più particelle in movimento. Una particella diventa parte di un cristallo (e si
ferma) quando si trova in prossimità di un cristallo già formato. I parametri di base della simulazione
sono la dimensione della griglia 2D, il numero iniziale di particelle, il numero di iterazioni e il "seme"
cristallino iniziale. Implementare l’algoritmo di DLA utilizzando 2 tra i seguenti approcci: MPI,
PThread/OpenMP, CUDA.

Processo base del programma SingleThread -> {
	- Inizializzazzione della griglia -> {
		- Creazione di una matrice di particelle
		- Inserimento randomico delle particelle
		- Creazione del primo cristallo
	}
	- Loop -> {
		- Muovi l'i particella -> {
			- Particella cristallizzata? -> Skip
			- Spostamento randomico dato da un random walker
			- Controllo di cristalli nelle vicinanze (celle adiacenti per semplicità)
			- Possibile cristallizzazione
		}
		- Controlli di fermo -> {
			- Intercettamento segnale di interruzione
			- Controllo massimo iterazioni (-1 per infinite)
			- Controllo particelle bloccate (si può usare un contatore incrementale per ogn particella, divisibile tra i vari thread)
		} (true) -> Uscita dal Loop
	}
	- Salvataggio ultimo stato della griglia -> {
		- CSV Di dimensioni widthXheight
		- Ogni cella ha un valore ternario (0: No particella, 1: Particella, 2: Cristallo)
	}
	- Possibile visualizzazzione del finale -> {
		- Programma per salvare in png il csv
		- Opzione per visualizzare particelle non aggregate
		- Parametri per i colori dei componenti
		- fg: white
		- bg: black
		- pc: red
	}
}

Strutture dati necessarie -> {
	- Particella -> {
		- Stato (cristallizzata o meno)
		- Posizione (coordinate x,y nella matrice)
	}
	- Griglia -> {
		- Matrice x,y di particelle
		- width
		- height
	}
}

Strutture dati Multithread -> {
	- Settore -> {
		- Mutex di dimensioni w,h con offset x,y dallo 0,0 della Griglia
		- Controllo concorrenza per scrittura/lettura griglia
		- Dimensioni w,h arbitrari (essendo una griglia, i settori dovranno essere tali che width%w e height%h siano interi)
	}
}
